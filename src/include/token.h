#ifndef SCSS_TOKEN_H
#define SCSS_TOKEN_H
typedef struct SCSS_TOKEN_STRUCT
{
  enum
  {
    SCSS_TOKEN_ID,
    SCSS_TOKEN_CLASSNAME,
    SCSS_TOKEN_TAGNAME,
    SCSS_TOKEN_HASHNAME,
    SCSS_TOKEN_VAR,
    SCSS_TOKEN_RULE,
    SCSS_TOKEN_LBRACE,
    SCSS_TOKEN_RBRACE,
    SCSS_TOKEN_LPAREN,
    SCSS_TOKEN_RPAREN,
    SCSS_TOKEN_LBRACKET,
    SCSS_TOKEN_RBRACKET,
    SCSS_TOKEN_QUESTION,
    SCSS_TOKEN_DIV,
    SCSS_TOKEN_MOD,
    SCSS_TOKEN_NOT,
    SCSS_TOKEN_DOT,
    SCSS_TOKEN_COMMA,
    SCSS_TOKEN_PIPE,
    SCSS_TOKEN_ESCAPE,
    SCSS_TOKEN_SQUARED,
    SCSS_TOKEN_TILDE,
    SCSS_TOKEN_SEMI,
    SCSS_TOKEN_COLON,
    SCSS_TOKEN_COLON_COLON,
    SCSS_TOKEN_STRING,
    SCSS_TOKEN_INT,
    SCSS_TOKEN_INT_MIN,
    SCSS_TOKEN_FLOAT,
    SCSS_TOKEN_HASH,
    SCSS_TOKEN_ARROW_RIGHT,
    SCSS_TOKEN_EQUALS,
    SCSS_TOKEN_EQUALS_EQUALS,
    SCSS_TOKEN_EQUALS_EQUALS_EQUALS,
    SCSS_TOKEN_PLUS_EQUALS,
    SCSS_TOKEN_MINUS_EQUALS,
    SCSS_TOKEN_NOT_EQUALS,
    SCSS_TOKEN_NOT_EQUALS_EQUALS,
    SCSS_TOKEN_PLUS,
    SCSS_TOKEN_MINUS,
    SCSS_TOKEN_STAR,
    SCSS_TOKEN_INCREMENT,
    SCSS_TOKEN_DECREMENT,
    SCSS_TOKEN_SPREAD,
    SCSS_TOKEN_LT_EQUALS,
    SCSS_TOKEN_GT_EQUALS,
    SCSS_TOKEN_AND_AND,
    SCSS_TOKEN_AND,
    SCSS_TOKEN_LT,
    SCSS_TOKEN_GT,
    SCSS_TOKEN_IMPORTANT,
    SCSS_TOKEN_IMPORT,
    SCSS_TOKEN_MEDIA,
    SCSS_TOKEN_BLOCK,
    SCSS_TOKEN_EOF
  } type;
  char* value;
  char c;
} scss_token_T;

scss_token_T* init_scss_token(char* value, int type);

void scss_token_free(scss_token_T* token);

scss_token_T* scss_token_clone(scss_token_T* token);
#endif
